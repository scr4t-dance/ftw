/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FTW
 * Api for the FTW dance competition scoring software
 * OpenAPI spec version: 1.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CompetitionIdList,
  Error,
  Event,
  EventId,
  EventIdList
} from '.././model';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary Create a new event
 */
export const putApiEvent = (
    event: Event, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EventId>> => {
    
    
    return axios.put(
      `http://localhost:8080/api/event`,
      event,options
    );
  }



export const getPutApiEventMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEvent>>, TError,{data: Event}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiEvent>>, TError,{data: Event}, TContext> => {
    
const mutationKey = ['putApiEvent'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiEvent>>, {data: Event}> = (props) => {
          const {data} = props ?? {};

          return  putApiEvent(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiEventMutationResult = NonNullable<Awaited<ReturnType<typeof putApiEvent>>>
    export type PutApiEventMutationBody = Event
    export type PutApiEventMutationError = AxiosError<Error>

    /**
 * @summary Create a new event
 */
export const usePutApiEvent = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiEvent>>, TError,{data: Event}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putApiEvent>>,
        TError,
        {data: Event},
        TContext
      > => {

      const mutationOptions = getPutApiEventMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get the list of competitions of an Event
 */
export const getApiEventIdComps = (
    id: EventId, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CompetitionIdList>> => {
    
    
    return axios.get(
      `http://localhost:8080/api/event/${id}/comps`,options
    );
  }


export const getGetApiEventIdCompsQueryKey = (id: EventId,) => {
    return [`http://localhost:8080/api/event/${id}/comps`] as const;
    }

    
export const getGetApiEventIdCompsQueryOptions = <TData = Awaited<ReturnType<typeof getApiEventIdComps>>, TError = AxiosError<Error>>(id: EventId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventIdComps>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiEventIdCompsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEventIdComps>>> = ({ signal }) => getApiEventIdComps(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEventIdComps>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiEventIdCompsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEventIdComps>>>
export type GetApiEventIdCompsQueryError = AxiosError<Error>


export function useGetApiEventIdComps<TData = Awaited<ReturnType<typeof getApiEventIdComps>>, TError = AxiosError<Error>>(
 id: EventId, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventIdComps>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventIdComps>>,
          TError,
          Awaited<ReturnType<typeof getApiEventIdComps>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiEventIdComps<TData = Awaited<ReturnType<typeof getApiEventIdComps>>, TError = AxiosError<Error>>(
 id: EventId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventIdComps>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventIdComps>>,
          TError,
          Awaited<ReturnType<typeof getApiEventIdComps>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiEventIdComps<TData = Awaited<ReturnType<typeof getApiEventIdComps>>, TError = AxiosError<Error>>(
 id: EventId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventIdComps>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the list of competitions of an Event
 */

export function useGetApiEventIdComps<TData = Awaited<ReturnType<typeof getApiEventIdComps>>, TError = AxiosError<Error>>(
 id: EventId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventIdComps>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiEventIdCompsQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get the details of a single Event
 */
export const getApiEventId = (
    id: EventId, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Event>> => {
    
    
    return axios.get(
      `http://localhost:8080/api/event/${id}`,options
    );
  }


export const getGetApiEventIdQueryKey = (id: EventId,) => {
    return [`http://localhost:8080/api/event/${id}`] as const;
    }

    
export const getGetApiEventIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiEventId>>, TError = AxiosError<Error>>(id: EventId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiEventIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEventId>>> = ({ signal }) => getApiEventId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEventId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiEventIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEventId>>>
export type GetApiEventIdQueryError = AxiosError<Error>


export function useGetApiEventId<TData = Awaited<ReturnType<typeof getApiEventId>>, TError = AxiosError<Error>>(
 id: EventId, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventId>>,
          TError,
          Awaited<ReturnType<typeof getApiEventId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiEventId<TData = Awaited<ReturnType<typeof getApiEventId>>, TError = AxiosError<Error>>(
 id: EventId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventId>>,
          TError,
          Awaited<ReturnType<typeof getApiEventId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiEventId<TData = Awaited<ReturnType<typeof getApiEventId>>, TError = AxiosError<Error>>(
 id: EventId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the details of a single Event
 */

export function useGetApiEventId<TData = Awaited<ReturnType<typeof getApiEventId>>, TError = AxiosError<Error>>(
 id: EventId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiEventIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get the list of Events
 */
export const getApiEvents = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EventIdList>> => {
    
    
    return axios.get(
      `http://localhost:8080/api/events`,options
    );
  }


export const getGetApiEventsQueryKey = () => {
    return [`http://localhost:8080/api/events`] as const;
    }

    
export const getGetApiEventsQueryOptions = <TData = Awaited<ReturnType<typeof getApiEvents>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEvents>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiEventsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEvents>>> = ({ signal }) => getApiEvents({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEvents>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEvents>>>
export type GetApiEventsQueryError = AxiosError<unknown>


export function useGetApiEvents<TData = Awaited<ReturnType<typeof getApiEvents>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEvents>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEvents>>,
          TError,
          Awaited<ReturnType<typeof getApiEvents>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiEvents<TData = Awaited<ReturnType<typeof getApiEvents>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEvents>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEvents>>,
          TError,
          Awaited<ReturnType<typeof getApiEvents>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiEvents<TData = Awaited<ReturnType<typeof getApiEvents>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEvents>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the list of Events
 */

export function useGetApiEvents<TData = Awaited<ReturnType<typeof getApiEvents>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEvents>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiEventsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



