/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FTW
 * Api for the FTW dance competition scoring software
 * OpenAPI spec version: 1.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CompetitionId,
  Error,
  Phase,
  PhaseId,
  PhaseIdList
} from '.././model';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary Get the details of a Phase
 */
export const getApiPhaseId = (
    id: PhaseId, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Phase>> => {
    
    
    return axios.get(
      `http://localhost:8080/api/phase/${id}`,options
    );
  }


export const getGetApiPhaseIdQueryKey = (id: PhaseId,) => {
    return [`http://localhost:8080/api/phase/${id}`] as const;
    }

    
export const getGetApiPhaseIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPhaseId>>, TError = AxiosError<Error>>(id: PhaseId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPhaseId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPhaseIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPhaseId>>> = ({ signal }) => getApiPhaseId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPhaseId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPhaseIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPhaseId>>>
export type GetApiPhaseIdQueryError = AxiosError<Error>


export function useGetApiPhaseId<TData = Awaited<ReturnType<typeof getApiPhaseId>>, TError = AxiosError<Error>>(
 id: PhaseId, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPhaseId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPhaseId>>,
          TError,
          Awaited<ReturnType<typeof getApiPhaseId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPhaseId<TData = Awaited<ReturnType<typeof getApiPhaseId>>, TError = AxiosError<Error>>(
 id: PhaseId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPhaseId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPhaseId>>,
          TError,
          Awaited<ReturnType<typeof getApiPhaseId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPhaseId<TData = Awaited<ReturnType<typeof getApiPhaseId>>, TError = AxiosError<Error>>(
 id: PhaseId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPhaseId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the details of a Phase
 */

export function useGetApiPhaseId<TData = Awaited<ReturnType<typeof getApiPhaseId>>, TError = AxiosError<Error>>(
 id: PhaseId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPhaseId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPhaseIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete a Phase
 */
export const deleteApiPhaseId = (
    id: PhaseId, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Phase>> => {
    
    
    return axios.delete(
      `http://localhost:8080/api/phase/${id}`,options
    );
  }



export const getDeleteApiPhaseIdMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiPhaseId>>, TError,{id: PhaseId}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiPhaseId>>, TError,{id: PhaseId}, TContext> => {
    
const mutationKey = ['deleteApiPhaseId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiPhaseId>>, {id: PhaseId}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiPhaseId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiPhaseIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiPhaseId>>>
    
    export type DeleteApiPhaseIdMutationError = AxiosError<Error>

    /**
 * @summary Delete a Phase
 */
export const useDeleteApiPhaseId = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiPhaseId>>, TError,{id: PhaseId}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiPhaseId>>,
        TError,
        {id: PhaseId},
        TContext
      > => {

      const mutationOptions = getDeleteApiPhaseIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Update parameters of a Phase
 */
export const patchApiPhaseId = (
    id: PhaseId,
    phase: Phase, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Phase>> => {
    
    
    return axios.patch(
      `http://localhost:8080/api/phase/${id}`,
      phase,options
    );
  }



export const getPatchApiPhaseIdMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiPhaseId>>, TError,{id: PhaseId;data: Phase}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiPhaseId>>, TError,{id: PhaseId;data: Phase}, TContext> => {
    
const mutationKey = ['patchApiPhaseId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiPhaseId>>, {id: PhaseId;data: Phase}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiPhaseId(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiPhaseIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiPhaseId>>>
    export type PatchApiPhaseIdMutationBody = Phase
    export type PatchApiPhaseIdMutationError = AxiosError<Error>

    /**
 * @summary Update parameters of a Phase
 */
export const usePatchApiPhaseId = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiPhaseId>>, TError,{id: PhaseId;data: Phase}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchApiPhaseId>>,
        TError,
        {id: PhaseId;data: Phase},
        TContext
      > => {

      const mutationOptions = getPatchApiPhaseIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create a new phase
 */
export const putApiPhase = (
    phase: Phase, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhaseId>> => {
    
    
    return axios.put(
      `http://localhost:8080/api/phase`,
      phase,options
    );
  }



export const getPutApiPhaseMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiPhase>>, TError,{data: Phase}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiPhase>>, TError,{data: Phase}, TContext> => {
    
const mutationKey = ['putApiPhase'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiPhase>>, {data: Phase}> = (props) => {
          const {data} = props ?? {};

          return  putApiPhase(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiPhaseMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPhase>>>
    export type PutApiPhaseMutationBody = Phase
    export type PutApiPhaseMutationError = AxiosError<Error>

    /**
 * @summary Create a new phase
 */
export const usePutApiPhase = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiPhase>>, TError,{data: Phase}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putApiPhase>>,
        TError,
        {data: Phase},
        TContext
      > => {

      const mutationOptions = getPutApiPhaseMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get the list of phases of a Competition
 */
export const getApiCompIdPhases = (
    id: CompetitionId, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PhaseIdList>> => {
    
    
    return axios.get(
      `http://localhost:8080/api/comp/${id}/phases`,options
    );
  }


export const getGetApiCompIdPhasesQueryKey = (id: CompetitionId,) => {
    return [`http://localhost:8080/api/comp/${id}/phases`] as const;
    }

    
export const getGetApiCompIdPhasesQueryOptions = <TData = Awaited<ReturnType<typeof getApiCompIdPhases>>, TError = AxiosError<Error>>(id: CompetitionId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCompIdPhases>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCompIdPhasesQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCompIdPhases>>> = ({ signal }) => getApiCompIdPhases(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCompIdPhases>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCompIdPhasesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCompIdPhases>>>
export type GetApiCompIdPhasesQueryError = AxiosError<Error>


export function useGetApiCompIdPhases<TData = Awaited<ReturnType<typeof getApiCompIdPhases>>, TError = AxiosError<Error>>(
 id: CompetitionId, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCompIdPhases>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCompIdPhases>>,
          TError,
          Awaited<ReturnType<typeof getApiCompIdPhases>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCompIdPhases<TData = Awaited<ReturnType<typeof getApiCompIdPhases>>, TError = AxiosError<Error>>(
 id: CompetitionId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCompIdPhases>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCompIdPhases>>,
          TError,
          Awaited<ReturnType<typeof getApiCompIdPhases>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCompIdPhases<TData = Awaited<ReturnType<typeof getApiCompIdPhases>>, TError = AxiosError<Error>>(
 id: CompetitionId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCompIdPhases>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the list of phases of a Competition
 */

export function useGetApiCompIdPhases<TData = Awaited<ReturnType<typeof getApiCompIdPhases>>, TError = AxiosError<Error>>(
 id: CompetitionId, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCompIdPhases>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCompIdPhasesQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



